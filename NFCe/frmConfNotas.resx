<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIABjFwAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgEAAAA9ntg7QAAAAFv
        ck5UAc+id5oAABcdSURBVHja7Z0JmBTVtcdP7XtV79M9+74wzCAM+46AIIKgYEBRETSIJn4EMUbUBGOQ
        mBj3ZxSNCi5RnxH0GcQXE58omuhTY1wwroC4i4oIImvn3mp2ZpheqpfqPr/65hsRZrrq3n/de865554L
        gCAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIkiFKoAuU
        AQt9c/T+uoMGIfBDOQThOOwu56mGXkW1AR5KwQsDc+7uIlAFMpSZRT26SAb0hibsMKdRoehM+WlzfJOo
        kLGgEoblzJ01wTFgwhjWGio+yn0hL/YdBWQUiObQHeYFIgRmsVF2s3SvtyeAB+YSGWQf0tfgI1/+Rvm/
        2C9Jr5OL+1C9LFwKZKwCGI0d56wA7Ab+WL0iWA5QBAz0yeIdtZHJKEK+h4LqBfy7sc6PXUxUeEU/o9oQ
        oIHYLuOw85wVAG1g/jX9h6UmBxXE8BqchbvpSz65nkxLNbJxkvAss/vA7t9zj9ulx6zho3gLRkIrjMcO
        dFIAdgPvEP/XGtWT10jzlmf4XhpgEliwkvH0Ex9gvzu88/de7NfKzf4udKyCHDRcXS4Au4E3yn/wtcRm
        4caMuXtk0KezfrVyFfdZx52/9+LXaBcVh4GMGBq6h04LwLYI1qmXhshUHAYDeqX5HnqTOb8CeCj2aj/i
        VzNRiOtidovPG1MaVAVaiDN7PHalswKwTa4XjdPKNZH44uE03kEtmWwMaBXNccKTzE6IJnKxW6WlnoGz
        WC8RQAt2prMCsEXwvfiINXQsa0C/tFgEXeAp8FOXr01awn6bWOfvG6s2KNcG6sAWaR/sUGcFYL9lX8o3
        +okpECD/ut7BT+4JEhST70VlyuXcR8l1/j6L4G1tdmmAxjWDMAo71VkB2A38rjo3HKRBGL9Dn1tBhn4R
        Kk3tTP5fTBRSvphd4jPGhFZZg25EBojDAqAml/CsMaleVqDGttZToZ6YfRYM5q1jxBXMdog6dbFb5D96
        ekUZP8yGZuxaZwVgN/B30gOevu8yFswnb3Cycb497l5XeRG70bnO32cRfKouDFXSVc7YZyEOCsBu4M/k
        3waqaBBGhK4JftZEMkOXke+RiDqPW+t85+/zXl7XZlZ4ODLJFGMHOy0AO2C8Wju3zMtDpR2Li5cqaAQN
        6jTjFOEFJgppvZgd0hPm6L6CAT3I5yKOCsBu4J3ik+a47iLx3+OaDLrCOPDBVNY7RFzGfg/RTFzsJvl2
        XzfqvURzYoUzrwRgN/C30l0+Ms1Sv+BIiRo0UEt99FCDfD33ZWY6f9+EtV79RVEJ9V40NAudFoDdwB8p
        lxeRab0YVOJ+tTfrR8hEwUJpUJvDv5PZzt9nEbysn16li1BnG4aIowKwLYJX9BnVpkzm2shhQd4WMKCr
        bE4UVrW3tJsxEWyT/mwNG8NZMAQa3N5h0+EmWEOeKlcEEFujF1dYI4lfD4PIexajNywhs+93jK+vdN+R
        lnYzNhl8Jd/ka4q5oD3d2/2aPYxF4fmcEsCeJeRF/q6xBu5LJgR6n0XVypXxLO1m6uLfV38aDtEoZImD
        r1DGKIN6kKBa9ZzSMgFgPgx2JDLvlADst2ytOi8SoUkaBpR5tXOE1UwUcupidgt/16dUqsVuE0ALnAYW
        zGatAdJD7A59IRkFGOpcWTklAGoRKPd2Eem6obqQ3Q3R3LvIHa6sqXeVAPoDTYcG8NUq13Bf0EfQfgXQ
        OMk7VIHGlFfBnRUARKVnalQ6/MuLc7H7+XXqJeFigHFuEcAQ8Nhp0BG/Npt/a6+GqQA8v+bW6uMAyu1l
        2lQE4HdWACv3CODOXOt87hv5VproRqOXg4kh7QKoG6VCo2RMEJ5mdu0fxKgArAVMlPvcPHMiE0kp4l0Y
        AmB2iI+bI4cRP6WfW6KCfcl9e+lXL+ledvPBs5g9Aixg7HCn+JOeYjCFVfr8FwATFV7Vz6y2ZGI0l7mj
        8wdBbKAKVii/5j45/IH2C4AmbWlXlRtUACNQAO3N+h+rvyoqpz6U7I6EsaEQhirgocTSZ/KvMe0q+kAB
        2K7NrUG/DJDUVJDPAmA3y3d526IQgvvcshLQCL1Ah96COVr4C7OjoyHtYAHYzb6suEolPz8GBbA/Rewp
        c1ybZEIPRzMZ00hviG3F8LXKt7PfHGlOO1wAZJ5bqTYBDEv4YfNRAKQ1/q39uNzHQw0ZFV0R/e+/J3ga
        KlZ/zn3Q2eMdLgDbzXk5MAjaWZIpNAFwnyu/C9XEksIa3THrVxCVylClG9P4l5g49N2+AOh2KXUslUB9
        wQqA3Sr9t7f/dYwfprjF3WuAwWDBeM4zTHyU3RbfANeRAEgDfKJPO48NgVaAAmB2i88ZJzUrOrSSod8V
        HLUnyBtokm/ivop/hutYAGQA3KT9NMQH4o4P5osA+Pe0C0pCdPwLtZuakoNB3qC92SoS0i7k30vMxDmS
        AMjfbxUXNBle4k2cUiAC4L6Sbww0xhLPurnj3a8kM5QGDYo5WXgu0VyZzgRAXSD1joDfsyeklN8CYLdJ
        /2MNnch54Ri3+PrVMA68cDfjGyA9yG5NxsnpTAB2otaDoXLWDifnrwCIu/eSflqdrpLXySXJ382kwelA
        FaxRruY+T/axOxdArCsCLRocDf3yVAD8B+qlkRK6Hmq5JckrbJdBKPPp5/FvMinoPj4BkCZ6We1DRVeS
        dwJgN8l/8HejCWhR6OGOzi+FJjCgRbQmiE8lWgYhWQFQ29g7ni6ElOaRAOwqRqP7Cx4Y4I5AD01CjNoL
        tv6e0j0HL+2mWwD2Xr6py5nSDss7uEsAsTpmFZYEtW5Z2qVhXlqyIFyuXsF97EwjJCIA8u836hf0Fv1k
        8hnucgFwHysLQhV01VMgNr9roLXs/McLrzKOvQWJCYC6SvIVPsVsNz7oFgGwm6V7aC1TP/lDb3AV/Umf
        mUucHAYTFQC5dkqLqoKmvfLgPgEwu4SnzPHdRBNa3bjXtx9sZMw7sywA8lPyMqtUI//Z3WUC4N9Szyvx
        AlRazzA0cN7TfQL4JgcEYDflE8FmGizVXCMA7gv56kAN8aG82k/Ef6iXUb+/uNPgFgqgw0t8xepP42at
        LhAAu1V80DOATKG8NUFYSbOi6U5fY1q1riac9YAC2N+sb+tj6FqEP6cFYG/hmtwsEaPvkKxodrv4qDV8
        BOchPk0tCiC5MkrmGbfD3t0EuSgA7j31wgiZ7osq1HayommxaPmmQJfYRtQaFEASo8A30nn9hJCdi5Br
        AiCd+3u6jbvCMM5uPyt6307fC4uLeChxrHJhAQmA5gzoV1Zq/hwTALuNDO9HR2Em6zlW7DAr+sBpwphc
        p+jQmHTRuoIVgJ02fXPQq+aMAJgo/5I+jea2B7odOSv6EEPxT54BVzFeOH1faQoUQPyd9VBxpZITAuDW
        q/NDxCgJR7RfdJYVfXgWsHx1sDZmEVShABL7TdJ1kHUBsJukO+iJYNWqOU14iUnqOfh/a+eV+EQoh3Du
        +Qa5KwBiSi3JrgCYncIT1pgpLID36HizojsOFxvjWyQDWnLNIshlAQiLsycA8t6+rs8qNcms36gkkBV9
        xAWjuz096f6qy3PpiEkUQLsz9yfKlXRpNxxINCs6viXjSBK1jFEAGRIAu0X6o683QJOYTFZ0fEkj5ZYE
        1VCSCzlDKIBD5uqnzRPbBDLr908uKzretDFzVD+epovWoAByRQDk3Xxbn1PsAwhWJ58VnUC88zZaE4jG
        O+tQANkXALdBuZ4e7lTsSS0rOiGLYJ16Ka0KVgKe7G0WRQGQt/F7cZl3MMBQzjxe+L/UsqIT3jzyon5q
        jaZAQ7bcw0IXAOmCF8yp9bJ9ONzdyR4Ol9r2MfERa8gPOA8My4Z7WNgC4NdoF4eLyExcpixI9XC4lCaD
        PYfflaf1EEwUwEECYL+WFwWaSaPr+lnOHA6XYtzzfe3CKqt4zx9RAGkVgH6z9IRnZJS5nLFGiSs6W9rN
        1CigXVPlU8jdnY0CSKcASmnucX2Vh/j6rfKt8S7tptkO2Cot9Q0E6CEYEyLDAG5CAaRzBFhnZx1WtUgv
        5kLnM7uF582TGyUiSGqGfqddQMtFowDSOgXQaHytaA0Rl2bqlLAOZ/412rxICCBEzVB7c542J3aUFQog
        rQKgVVB0qFONk4V/ZMsAZL9WbqHpo5WGdha/b3Oeej4KIAMCoISgFFiIhNWL+DUZH/i3i495RkThUtY6
        Rnz8QDMUBZAxAcSqFNmV0JrlW7iNGev8qPCKMaNKI0/XIt12qBmKAsigAMBeiukHHhjKe0aIy9nt6e9+
        br16GT0uMhJRL+HbyTBEAWRYAJQyqAYNqgx9uvDPdFoE7CZ5Mc0wbFT1U4UX2/8kFEAWBBCzCOjfhMvU
        X3IfpmXg3yn+1TruBywA8T4e6TjDEAWQJQGAvTWdWgT+HtJiZ5eFmCj/hjarzCLWRoN8w5HPKEYBZE0A
        lFpoBQvaBGus+DenFoa5T5XfBCsBSgLa3M4zDFEAWRUApRSqQIIKr34un/LhkuwW6X5vH4CeojFJeDae
        DMO8EIB1hZsFQOt86Pb+5KJq5bfJHy/L7BJWGSd2E8gL0Vd6IN4zivNCAN7x3AY3C4DSDD8GP3zE+PpJ
        9ydzwDT/jnZ+2G9nGCYkorwQwB3gncSvdbcAKDXQBUxoTviIeW6DfJ23FqDCo/9ISDDDMC8EQPPd1YHc
        q24XAK1ZVAqVwEFZUDuffyeermS+l5ZZgwDG8OZY8cn9R2oWlAB6QR9Qwd9d/LvbBUChJyDTVK1Qg3z9
        kV04mmGonUwzDL095LuSq7uaFwIgDQDnU6+6mn+Ycb0AKE0wAnwwnfUOEZd1tITMr1XmhYqI6VimXs4n
        nWGYJwKInStugS+k3JPs9qpcEgClGhpAgzrNOFX4/0NlzW6UF3mbAep0fYaQUoZh3ggA4BxQwAP1HvEq
        Zls+CACgBwTsMtDFdCFn3QFLuyuMEX9ibmDNkdKKVBeU8kgAFB9xpfyiejG3JR8EQDkKYvU+Ai3yrexG
        Jsr/S5tRoZMn7SovcmJJOc8EAGQUCMFE3pjJfp4fAqA0ECPXA0N4a7Q6J0iGhEhYvXj/iIACOCy+Trc9
        qSfw67MugKedEQCNFZaT56InIjcp+tTDbQIUwEEUE1+adOZw7rXsCkBeXi87JYCTiKczlbMGSw87m1ia
        lwKgowA9HkprFZ7LlgDYTfId3q5O1OoabWcVEyugXukkLoACOIDhcA8ZMsN10vLMC4DZIT5hjO4jmHBN
        iiUZjiPvPR3NSoLaHP6ddCSO5K0AwF5fEyFQJCyOLzLgjACYqPC6NrPcQ49rL4JjU2ir46HOLmffLBsn
        iqucLh5TAAIAONp2DEst7Xpme2YEwH2qLKTJGFR8o1JsqauIS7ue8fRJbnUQBWCjEwEEoJss/qzzSHmq
        AqDlnqxeUcYPr8DglFrp2D3jV7BKuTL5/AAUwB7CZCjuxhrndGZApSIAZpf4jHFCi0yPa0+tBs9Ycr81
        wEG5V5slrE7/LqICEABdKqJ7dPUT2bXpEQD/tja7JBA7eiKVWX8CNEBvMGhC1xjncgRRAHa+TR1IYAwT
        3nRaANwG5Vpa7ok6aiNTaps22GLX+/ceJS/OXPGYAhEAkPeqgfrSPbhVzgmA/V5a6hl4LuuDySme2jsC
        BHufQKhUmZ+efQIFLwCArnA2cQuNamkF44AAmN3iC8aURjX149qPJ11fT+6s0tDOSO9OoQIXQKwQgg7l
        xdJdsCs1AfBrtYuKw3TWt1J09+qJx2DCcM48WlzObIcooADSJwAamOVBA68hXcvuSFYA3Eb5Fn9zLG0r
        tYMbaQFnujfI10X+Pft15ju/AAUA9kHLPuii6L9gNicuAHa79Jg1fDTvgYEpVtkbQMYOmuwRLlJ/lvl6
        AQUsgFhkIALHcdJZB0cGOhMA3WevT68xZWJOlqfYDrRytwy1qjZZeD67JeMKUgB0Oxa1uT2TDzyT58gC
        4D9U54dL6dZujTiVqVBDGtyCc1hrgLQ0XRXCUQBxjAL0PB1lCPdG5wJgv5XvpPvsQ/B6imWW6U8X0VyF
        Wvla7otsd35BC4Bm23UHFXw9xeePJABmp/g3c0wf0YK2lAutB+xcpRK/Npt/Kxc6v8AFQC1wezdBLf9n
        pl0BkFl/tTarwsuTri9JceCvIDa/Cs2SMUF8OvH9OyiAjgWwILVUKxoj9IWV+5jDTg3jPlOuDFXF1uW6
        pejr/w685Fd6Djn8GQWQdQEA+SUcMclqvdKNnkX7BcB+J9/v7bOaCcCMFGf9YeT301k/WKEsbO/w54IT
        wDbGXJJLAqDbsLzggQr19C4xATC7xVXmRLq0e5QDBy+OAwbCXm0W/zoThRy8tLkZFQCtlOeb4lx2mxMC
        oGvwIvjJvakQmiW+q80pDdKYYRBGOPDEc2lyxxDxzVzsfHqCiHcgff6M0RP6UGu4Xr7OiZIOTglgf3Sg
        raa0Iba028ux31oFpzJ+mtG7Ibe6n/tA/Tk9o/jVTI4ANP59Ahlyf8hag5woneysACwoJ+/9KGh19Im7
        kTfMA9NZzyBpWbaLRe+LbHwj3+5rpUFxcPhp43SJGslwW6vqJ6caCHVWAOliLFQSJ1KmO31PEV7Iti3A
        7BD/Yo1u43XoDtXZapIm8k5Q9yocVudxa/JdAJRjQbBXECJhbV7q5WySby/+NX1msclDGQSy3SQ1dmyM
        WN7N0i3JLoa6RwAUmqZOd/r6muVF7MYszPqfqAuD5bFW75YbTVID/cGE/pw1QnwsmXQIdwmA0gJDyRMP
        5a2R0opMJoCwm6V7vb2iZOSNZvfs0PYCsuW0UKKhz+ATTohynwAAxhAvo45MCJWmkWJ1j/iT1oWV5oQG
        SSG2V0kuNkk96LGySKVKgqWT3SiAmEUAdlfQ+j7pPUGQzPpvabPDPobYXFYuNwldavHSr4RKJ7tVAJSh
        5AEC9hPLS9KVBs59oVzrrwU73bwu95ukiIwFGrQK5lghzm0RbhYApQHayOjXJto1/hzeCMJulR7yDpzN
        mnCcvcPYJQSJgyJAaZylk90uAGoRBKAKWCjzaufyjgWM7cPhplQrMtRm/njYVKGlUKizFE/VW/cLgLK3
        BEQwpWLRB6Svva9dFCmiC9lminnLWaME5hOH5RPG20nd6/wQAKU7nE1m6keYRCp9tzvwf63cTA+HC9jh
        NldTTMwWFepl8wiV7/NHAJRqYgpr0KjEW+v/sNbYJi73DB/CmdDLTj7LA4L2WXvFQW0u907+C4DitwPG
        9In5dxNc2v2nMb1cF4hFUZRPDVIPjD2cBRrkG9kv818AsSCtnTncIN/AxlkUiluvXVZUSnOdRegLeUcp
        GdJMOIH1DJUeOXhBNR8FEHMPhxIbaBJnDREfZrd1Wo/MTlr3waoU09dymggZ2mSo0cyDSifnqwAo5cQG
        UsgT61P5DgtDMjvEv1pjugsaGTeqIM/pSeZH+6y9iHYJtzb/BUCjo95YwDiiXsKtayfI+4ZxTqmHhUpi
        Kw2DgqAJYmFNf4t8G11QzW8BUPYumvtapFsPPPeX+1T9Tagytkd5EBQUlWS4M2Ag7xklPs7u1hbm/xNX
        k9HPgkG8eYxgn/zNbpHv9/WJkvFhWjYSurJPX2IW1hB7t8K0ZlWcUghPXGc/sUyeWJspLTUnNsoKtJD/
        MxwKlt6kOWhS2Qts4Yx8mj3gdxHoHmWzUGb9I9EDRsIvC+qJy4k3FCHPPRA7H0EQBEEQBEEQBEEQBEEQ
        BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
        BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQJNf4D+Yr8M46QgyjAAAA
        AElFTkSuQmCC
</value>
  </data>
</root>